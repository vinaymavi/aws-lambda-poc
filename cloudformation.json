{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Template to upload latest commit to lambda service and create new version of it.",
  "Resources": {
    "MyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "cf-aws-lambda-poc",
        "Description": "This is a poc function with code pipeline deployment.",
        "Code": "./",
        "Environment": {
          "Variables": {
            "ENV": "PROD"
          }
        },
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt": ["LambdaExecutionRole", "Arn"] },
        "Runtime": "nodejs8.10"
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": ["lambda.amazonaws.com"] },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },
    "FunVersion": {
      "DependsOn": ["MyLambdaFunction"],
      "Type": "AWS::Lambda::Version",
      "Properties": {
        "Description": "Dynamic Version Creation",
        "FunctionName": { "Fn::GetAtt": ["MyLambdaFunction", "Arn"] }
      }
    },
    "DevAlias": {
      "DependsOn": ["FunVersion"],
      "Type": "AWS::Lambda::Alias",
      "Properties": {
        "Description": "This Dev alias used for development purpose only.",
        "FunctionName": { "Fn::GetAtt": ["MyLambdaFunction", "Arn"] },
        "FunctionVersion": "$LATEST",
        "Name": "Dev"
      }
    },
    "RestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Description": "My API1",
        "Name": "myApi",
        "FailOnWarnings": true
      }
    },
    "RestApiResource": {
      "DependsOn": ["RestApi"],
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "RestApi" },
        "ParentId": { "Fn::GetAtt": ["RestApi", "RootResourceId"] },
        "PathPart": "{proxy+}"
      }
    },
    "RestApiMethod": {
      "DependsOn": ["RestApi", "LambdaPermission"],
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "ANY",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                { "Ref": "AWS::Region" },
                ":lambda:path/2015-03-31/functions/",
                { "Fn::GetAtt": ["MyLambdaFunction", "Arn"] },
                "/invocations"
              ]
            ]
          }
        },
        "ResourceId": { "Ref": "RestApiResource" },
        "RestApiId": { "Ref": "RestApi" },
        "MethodResponses": [
          {
            "StatusCode": 200
          }
        ]
      }
    },
    "RestApiDeployment": {
      "DependsOn": ["RestApiMethod"],
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "Description": "This is temp deployment",
        "RestApiId": {
          "Ref": "RestApi"
        }
      }
    },
    "RestApiStage": {
      "DependsOn": ["RestApiDeployment", "RestApiMethod"],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": { "Ref": "RestApiDeployment" },
        "RestApiId": { "Ref": "RestApi" },
        "StageName": "DEV"
      }
    },
    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": { "Fn::GetAtt": ["MyLambdaFunction", "Arn"] },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              { "Ref": "AWS::Region" },
              ":",
              { "Ref": "AWS::AccountId" },
              ":",
              { "Ref": "RestApi" },
              "/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "MyLambdaFunction": {
      "Description": "Lambda function created or updated",
      "Value": {
        "Ref": "MyLambdaFunction"
      }
    },
    "FunVersion": {
      "Description": "New Lambda Function version created",
      "Value": {
        "Ref": "FunVersion"
      }
    },
    "DevAlias": {
      "Description": "New Lambda Function alias created",
      "Value": {
        "Ref": "DevAlias"
      }
    },
    "RestApi": {
      "Description": "New Rest Api created or updated",
      "Value": {
        "Ref": "RestApi"
      }
    }
  }
}
